using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemySpawnManager : MonoBehaviour
{
    public GameObject enemyPrefab;
    public GameObject spawnEffectPrefab;
    public List<Transform> spawnPoints;
    public float spawnCooldown = 2f;
    public int maxEnemies = 15;
    public float mineralDropChance = 0.3f;
    public GameObject ironPrefab;

    private int currentEnemyCount = 0;
    private bool spawning = true;

    void Start()
    {
        StartCoroutine(SpawnInitialWave());
    }

    IEnumerator SpawnInitialWave()
    {
        for (int i = 0; i < maxEnemies; i++)
        {
            SpawnEnemyWithEffect();
            yield return new WaitForSeconds(0.2f);
        }
        StartCoroutine(SpawnLoop());
    }

    IEnumerator SpawnLoop()
    {
        while (spawning)
        {
            if (currentEnemyCount < maxEnemies)
            {
                yield return new WaitForSeconds(spawnCooldown);
                SpawnEnemyWithEffect();
            }
            else
            {
                yield return null;
            }
        }
    }

    void SpawnEnemyWithEffect()
    {
        Transform spawnPoint = GetValidSpawnPoint();
        if (spawnPoint == null) return;

        GameObject effect = Instantiate(spawnEffectPrefab, spawnPoint.position, Quaternion.identity);
        StartCoroutine(SpawnAfterEffect(effect.transform.position));
    }

    IEnumerator SpawnAfterEffect(Vector3 position)
    {
        yield return new WaitForSeconds(0.5f);

        GameObject newEnemy = Instantiate(enemyPrefab, position, Quaternion.identity);
        currentEnemyCount++;

        Enemy enemyScript = newEnemy.GetComponent<Enemy>();
        if (enemyScript != null)
        {
            enemyScript.spawnManager = this;
        }

        if (Random.value < mineralDropChance)
        {
            Instantiate(ironPrefab, position, Quaternion.identity);
        }
    }

    public void OnEnemyDestroyed()
    {
        currentEnemyCount--;
    }

    Transform GetValidSpawnPoint()
    {
        List<Transform> validPoints = new List<Transform>();

        foreach (Transform point in spawnPoints)
        {
            if (!Physics2D.OverlapCircle(point.position, 0.2f, LayerMask.GetMask("Wall")))
            {
                validPoints.Add(point);
            }
        }

        if (validPoints.Count == 0) return null;
        return validPoints[Random.Range(0, validPoints.Count)];
    }
}